---
title: Opiniões nas Margens
author: Bernardo Reckziegel
date: '2022-04-25'
slug: []
categories:
  - R
  - views
tags:
  - ffp
  - entropy-pooling
  - bayesian inference
meta_img: images/image.png
description: Description for the page
---

Dando sequência aos posts anteriores, hoje mostro como construir opiniões nas distribuições marginais. 

Mais uma vez utilizo o dataset `EuStockMarkets` -  que acompanha a instalação do `R` - para facilitar a reprodução dos resultados: 

```{r}
x <- diff(log(EuStockMarkets))
head(x)
```

Vamos assumir que o time de econometria (após algumas linhas de código e meia dúzia de derivadas) conclua que a distribuição Student-t assimétrica é a que melhor se adapta aos dados em questão. 

Para conduzir o processo de estimação utilizo o pacote [cma](https://reckziegel.github.io/CMA/)[^1]. Essa biblioteca não está no [CRAN](https://cran.r-project.org/) - _for now_ -  e para instala-la você deverá rodar o comando `devtools::install_github("Reckziegel/CMA")` no console. 

```{r, warning=FALSE, message=FALSE}
# devtools::install_github("Reckziegel/CMA")
library(cma)

t_model <- fit_t(x, symmetric = FALSE)
t_model
```

O pacote `cma` fornece algumas funções interessantes para geração de cenários. Utilizo `generate_margins` para criar um painel gigante com as mesmas propriedades estatísticas presentes em `t_model`:   

```{r}
set.seed(123)
t_margins <- generate_margins(model = t_model, n = 1000000)
t_margins
```

O output de `t_margins` é uma lista - `tibble` - que contém $1.000.000$ linhas e $4$ colunas. Veja:

```{r}
t_margins$marginal
```

Como já comentei outras vezes, o pacote `ffp` disponibiliza a família de funções `view_on_*` para construção de opiniões. Hoje utilizo `view_on_marginal_distribution` para impor _views_ com base no painel recém gerado:

```{r, warning=FALSE, message=FALSE}
library(ffp)

prior_from_simulation <- rep(1 / 1000000, 1000000)

views <- view_on_marginal_distribution(
  x     = x, 
  simul = t_margins$marginal, 
  p     = prior_from_simulation
)
views
```

As listas `Aeq` e `beq` contidas no objeto `views` têm $16$ linhas, ou seja, há $16$ restrições ativas nessa opinião. 

Por quê tantas restrições? Porque a função `view_on_marginal_distribution` foi desenhada para que a média, variância, assimetria e curtose sejam idênticas as do painel simulado, `t_margins`. Temos, portanto, $4$ restrições ativas para cada ativo, totalizando $16$ restrições. 

Do ponto de vista matemático, o problema que queremos resolver é:

$$ min \sum_{i=1}^I x_i(ln(x_i) - ln(p_i)) $$
$s.t.$

$$ \sum_{i=1}^I \hat{p_i} O_{i,k}  =  \sum_{i=1}^I p_i \hat{O}_{i,k} $$
$$ \sum_{i=1}^I \hat{p_i} (O_{i,k})^2  =  \sum_{i=1}^I p_i (\hat{O}_{i,k})^2 $$
$$ \sum_{i=1}^I \hat{p_i} (O_{i,k})^3  =  \sum_{i=1}^I p_i (\hat{O}_{i,k})^3 $$

$$ \sum_{i=1}^I \hat{p_i} (O_{i,k})^4  =  \sum_{i=1}^I p_i (\hat{O}_{i,k})^4 $$

Esse sistema é resolvido com a função `entropy_pooling`:

```{r}
library(ggplot2)

prior_from_data <- rep(1 / nrow(x), nrow(x))

ep <- entropy_pooling(
  p      = prior_from_data, 
  Aeq    = views$Aeq, 
  beq    = views$beq, 
  solver = "nlminb"
)
ep
```

O objeto `ep` contém as probabilidades que distorcem ao mínimo o vetor de probabilidades _equal-weighted_ e que ao mesmo tempo atendem as restrições desejadas.

O método `autoplot` do pacote `ggplot2` está disponível para objetos da classe `ffp`: 

```{r}
autoplot(ep) + 
  scale_color_viridis_c(option = "C", end = 0.75) + 
  labs(title    = "Distribuição de Probabilidades Posteriores", 
       subtitle = "Opinião nas Margens: distribuição t assimétrica", 
       x        = NULL, 
       y        = NULL)
```

Com base nessas probabilidades é possível computar as estimativas de locação e dispersão _condicionais_:

```{r}
cond_moments <- ffp_moments(x = x, p = ep)
cond_moments
```

Observe que o momentos _condicionais_ batem exatamente com os momentos do painel simulado:  

```{r}
# Location Matches
round(cond_moments$mu / colMeans(t_margins$marginal) - 1, 2)

# Dispersion Matches
round(sqrt(diag(cond_moments$sigma)) / apply(t_margins$marginal, 2, sd) - 1, 2) 
```

E divergem dos momentos _incondicionais_: 

```{r}
# Location doesn't match
round(cond_moments$mu / colMeans(x) - 1, 2)

# Dispersion doesn't match
round(sqrt(diag(cond_moments$sigma)) / apply(x, 2, sd) - 1, 2) 
```

Ou seja, a opinião dos econometristas é, de fato, levada em consideração no processo de otimização.

Agora vamos continuar com a brincadeira... Digamos que os analistas da gestora estejam pessimistas e acreditem que os retornos de todos os ativos terão um desempenho $10\%$ abaixo da média histórica. Digamos também que os econometristas estejam preocupados com um possível aumento da volatilidade e achem prudente reduzir o número de graus de liberdade de $\nu = 4.2$[^2] para $\nu = 2$: 

```{r}
# Return 10% below average
t_model$mu <- t_model$mu * 0.9

# degrees of freedom will be 2
t_model$chi <- 2.0
```

Para incorporar essas informações no modelo, as probabilidades precisam ser reestimadas:

```{r}
new_margins <- generate_margins(model = t_model, n = 1000000)
views <- view_on_marginal_distribution(
  x     = x,
  simul = new_margins$marginal,
  p     = prior_from_simulation
)
ep <- entropy_pooling(
  p      = prior_from_data,
  Aeq    = views$Aeq,
  beq    = views$beq,
  solver = "nlminb"
)
cond_moments <- ffp_moments(x = x, p = ep)
```

E veja que mais uma vez as opiniões são satisfeitas:

```{r}
# Location Matches
round(cond_moments$mu / colMeans(new_margins$marginal) - 1, 2)

# Dispersion Matches
round(sqrt(diag(cond_moments$sigma)) / apply(new_margins$marginal, 2, sd) - 1, 2)
```

![](https://media.giphy.com/media/ujUdrdpX7Ok5W/giphy.gif)

Modelar as margens como um todo adiciona um novo layer de flexibilidade no processo de construção de carteiras. A incerteza é tratada de maneira _prospectiva_, olhando para frente, não para o retrovisor.

Mas as margens não são o único elemento de uma distribuição multivariada que podemos moldar com o combo  [ffp](https://github.com/Reckziegel/FFP) + [cma](https://github.com/Reckziegel/CMA). É por esse motivo que no próximo post falarei sobre uma fonte de associação "invisível", mas extremamente relevante para modelagem de eventos de pânico. 

_Stay tuned_...


[^1]: Essa biblioteca será fundamental quando falarmos de copulas. 
[^2]: Você pode acessar essa informação com o comando `t_model$chi` no console.