---
title: 'Baixando dados financeiros com YahooTickers'
author: Bernardo Reckziegel
date: '2021-11-25'
slug: []
categories:
  - R package
tags:
  - R
  - tidydata
meta_img: images/tickers.png
description: Baixe e modele dados de diferentes bolsas mundiais de maneira rápida e eficiente
---

Meu primeiro pacote - `YahooTickers`- recentemente completou 3 anos. Por esse motivo, o post inaugural desse blog será sobre ele. 

Quando comecei a usar o R, não demorou muito para que me desse conta que estava sempre repetindo as mesmas tarefas. Assim, decidi sistematizar o acesso ao API do [YahooFinance](https://finance.yahoo.com/), o que resultou na construção do `YahooTickers`. 

O API do Yahoo não é perfeito, mas funciona bem e é razoavelmente simples. Se você programa com frequência e não tem acesso a Bloomberg, Economatica ou Refinitiv é possível que esse pacote interesse a você.

Para baixar o`YahooTickers` no RStudio você deve utilizar o seguinte comando no console: 

```{r}
# install.packages("devtools")
# devtools::install_github("Reckziegel/YahooTickers")
```

<!-- > OBS: O download de pacotes que não estão no [CRAN](https://cran.r-project.org/) pode ser realizado como o auxílio  do `devtools`.  -->

Suas principais funcionalidades serão demonstradas utilizando algumas ações do índice Dow Jones como referência:  

```{r, message=FALSE,warning=FALSE}
# bibliotecas necessárias
library(YahooTickers)
library(forecast)
library(ggplot2)

ticks <- get_tickers(dow)
ticks <- ticks |> 
  dplyr::filter(tickers != "DOW") # essa ação possui histórico relativamente curto
                                  # Chama-se DOW Inc., não confundir com 
                                  # o índice Dow Jones.
ticks
```

O pacote (atualmente) aceita tickers de 23 índices mundiais ([aqui](https://reckziegel.github.io/YahooTickers/reference/get_tickers.html) você consegue a lista com todas opções disponíveis).

<!-- Perceba que no comando acima não é necessario usar `strings` "com aspas" na função `get_tickers()`, pois toda estrutura é construída sob o conceito de `tidy eval`, o mecanismo de _data masking_ que turbina o [tidyverse](https://www.tidyverse.org/).  -->

Com os tickers em mãos é possível se conectar ao Yahoo com a função `get_stocks()`:

```{r, message=FALSE, warning=FALSE}
stocks <- ticks |> 
  dplyr::slice(1:12) |> # selecionando as 12 primeiras ações
                        # para tornar a análise mais rápida
  get_stocks(periodicity = "monthly")
stocks
```

Os dados já vem no formato `tidy` (longo), de modo a potencializar a iteratividade com o `ggplot2` e o todo o ecossistema do `tidyverse`. Veja:

```{r, fig.align='center'}
stocks |> 
  ggplot(aes(x = date, y = adjusted, color = tickers)) + 
  geom_line() + 
  facet_wrap(~tickers, scales = "free_y") + 
  scale_y_log10() + 
  labs(title    = "Ações do Índice Dow Jones", 
       subtitle = "2010-2021")
```

Caso haja interesse em levar a adiante a modelagem econométrica, o usuário tem a opção de utilizar `get_returns()` e `get_models()` em sequência:

```{r}
models <- stocks |> 
  get_returns(.group   = tickers, 
              .type    = arithmetic, 
              .omit_na = TRUE, 
              adjusted) |> 
  get_models(.group      = tickers, 
             .col        = adjusted, 
             .initial    = 60, 
             .assess     = 1, 
             .cumulative = FALSE, 
             .fun        = Arima, # Função Arima do pacote `forecast`
             c(1, 0, 0)) # modelo auto-regressivo
models
```

Seguindo esse workflow, as principais métricas _in-sample_ do modelo escolhido ficam acessíveis imediatamente e, assim como no gráfico anterior, o `ggplot2` cai como uma luva:

```{r, message=FALSE, warning=FALSE, fig.align='center'}
models |> 
  dplyr::filter(term == "ar1") |> 
  ggplot(aes(x = date, y = estimate, color = tickers)) + 
  geom_smooth(span = 0.10) + 
  facet_wrap(~tickers, scales = "free_y") + 
  labs(title    = "Coeficiente Autoregressivo de Ordem 1", 
       subtitle = "Estimação para dados mensais em uma janela móvel de 60 períodos")
```

Para analisar o comportamento de outras métricas, o processo é semelhante. Por exemplo, o ponto de ótimo da máxima verossimilhança em cada instante do tempo pode ser visto com o comando:

```{r}
models |> 
  ggplot(aes(x = date, y = logLik, color = tickers)) + 
  geom_line() + 
  facet_wrap(~tickers, scales = "free_y") + 
  labs(title    = "Evolução a Máxima Verossimilhança", 
       subtitle = "Estimação para dados mensais em uma janela móvel de 60 períodos")
```

Em alguns casos, as métricas _in sample_ não são tão relevantes. Nessas ocasiões, é necessário analisar a qualidade do modelo de outras maneiras.  Se o objetivo da análise for previsão, `Yahootickers` oferece a dobradinha `get_forecast()` e `get_metrics()` para avaliação dos erros _pseudo-fora da amostra_:   

```{r}
metrics <- models |> 
  get_forecasts() |> 
  get_metrics(.group    = tickers, 
              .truth    = adjusted, 
              .forecast = point_forecast)
metrics
```

Perceba que, mais uma vez, a utilização do `ggplot2` é imediata:

```{r}
metrics |> 
  dplyr::mutate(tickers = forcats::fct_reorder(tickers, mse)) |> 
  ggplot(aes(x = tickers, y = mse, fill = tickers)) + 
  geom_col() + 
  labs(title    = "Erro Quadrático Médio", 
       subtitle = "Estimação para dados mensais em uma janela móvel de 60 períodos")
```

Enfim, o pacote possui uma estrutura bem delineada que funciona da seguinte forma:

```{r}
### -- YahooTickers Workflow -- ### 
# get_tickers() |> 
#   get_stocks() |> 
#   get_models() |> 
#   get_forecasts() |> 
#   get_metrics()
```

Obviamente, o API não foi desenvolvido para análises muito complexas, __a principal função é coletar dados e fazer a coisa acontecer rápidamente__, sem `for loops` e em um formato _human readable_.

Como mencionado anteriormente, o pacote _atualmente_ suporta até 23 bolsas mundiais, mas como nem tudo é perfeito, a detecção de quais ações compôem quais índices é um processo complicado, que envolve _web scrapping_ de sites públicos, em constante transformação. Com isso, o código as vezes quebra. 

Sobre esse ponto, gostaria de mencionar que faço meu melhor para manter aquilo que já foi produzido sempre funcionando e foi assim que essa bibiliteca sobreviveu ao longo dos últimos 3 anos. Não há segredo: quanto mais pessoas utilizarem o API, maior o _accountability_ e mais rápido futuros erros poderão ser corrigidos.

Por fim, se você chegou até aqui, talvez tenha interesse em olhar a documentação, onde é possível checar em maior nível de detalhe as funções de utilizadas nesse post: https://reckziegel.github.io/YahooTickers/. 



Por hoje é isso e _happy-modeling_!
